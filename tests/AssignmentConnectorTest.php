<?php
require_once(dirname(__FILE__) . "/../source/controls/base/AssignmentConnector.php");

/**
 * Test class for OverviewFilter.
 * Generated by PHPUnit on 2011-05-06 at 12:20:39.
 */
class OverviewFilterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var OverviewFilter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AssignmentConnector;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    	
    }
    
    public function testSaveAssignmentWithoutID() {
    	$assignment = new Assignment;
    	
    	$assignment->setName("Test");
    	$assignment->setDescription("Description");
    	$assignment->setEmployer("Employer");
    	$assignment->setCreationDate(new DateTime("2000-5-20"));
    	$assignment->setDeadline(new DateTime("2000-5-25"));
    	$assignment->setStatus("in progress");
    	
    	$gotException = false;
		try {
			$this->object->saveAssignment($assignment);
		} catch (Exception $e) {
			echo $e->getMessage();
			$gotException = true;
		}
		$this->assertFalse($gotException);
    	
    }
    
	public function testSaveAssignmentWithID() {
    	$assignment = new Assignment;
    	
    	$assignment->setID(1);
    	$assignment->setName("Test");
    	$assignment->setDescription("Description");
    	$assignment->setEmployer("Employer");
    	$assignment->setCreationDate(new DateTime("2000-5-20"));
    	$assignment->setDeadline(new DateTime("2000-5-25"));
    	$assignment->setStatus("in progress");
    	
    	$gotException = false;
		try {
			$this->object->saveAssignment($assignment);
		} catch (Exception $e) {
			echo $e->getMessage();
			$gotException = true;
		}
		$this->assertFalse($gotException);
	}
	
	/**
	 * @depends testSaveAssignmentWithID
	 */
	public function testGetAssignmentByID(){
		$assignment = $this->object->getAssignmentByID(1);
		
		$this->assertEquals($assignment->getID(), 1);
		$this->assertEquals($assignment->getName(), "Test");
		$this->assertEquals($assignment->getDescription(), "Description");
		$this->assertEquals($assignment->getEmployer(), "Employer");
		$this->assertEquals($assignment->getCreationDate(), new DateTime("2000-5-20"));
		$this->assertEquals($assignment->getDeadline(), new DateTime("2000-5-25"));
		$this->assertEquals($assignment->getStatus(), "In Progress");
	}
	
	/**
	 * @depends testSaveAssignmentWithID
	 */
	public function testSeachAssignment() {
		$assignments = $this->object->searchAssignment("Test", 
										"Description", 
										"Employer", 
										new DateTime("2000-5-20"), 
										new DateTime("2000-5-20"),
										new DateTime("2000-5-25"), 
										new DateTime("2000-5-25"),
										array("In Progress"));
										
		$somethingfound = false;					
		foreach ($assignments as $a) {
			$this->assertEquals($a->getName(), "Test");
			$this->assertEquals($a->getDescription(), "Description");
			$this->assertEquals($a->getEmployer(), "Employer");
			$this->assertEquals($a->getCreationDate(), new DateTime("2000-5-20"));
			$this->assertEquals($a->getDeadline(), new DateTime("2000-5-25"));
			$this->assertEquals($a->getStatus(), "In Progress");
			$somethingfound = true;
		}
		$this->assertTrue($somethingfound);
	}
	
	public function testGetAssignmentByIDException() {
		$gotException = false;
		try {
			$this->object->getAssignmentByID(-100);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->getAssignmentByID(PHP_INT_MAX);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}
}