<?php

require_once '\..\source\controls\base\Assignment.php';

/**
 * Test class for Assignment.
 * Generated by PHPUnit on 2011-05-06 at 12:20:39.
 */
class AssignmentTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var Assignment
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Assignment;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
	}

	public function testIDonCreation()
	{
		$this->assertEquals($this->object->getID(), -1);
	}

	public function testIDSetGet() {
		$newId = 5;
		$this->object->setID($newId);
		$this->assertEquals($this->object->getID(), $newId);
	}

	public function testIDsetException()
	{
		$gotException = false;
		try {
			$this->object->setID(-1);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}

	public function testNameOnCreation()
	{
		$this->assertEquals($this->object->getName(), NULL);
	}

	public function testNameGetSet()
	{
		$name = "New Name";
		$this->object->setName($name);
		$this->assertEquals($this->object->getName(), $name);		
	}
	
	public function testNameSetExceptions() {
		$gotException = false;
		try {
			$this->object->setName(NULL);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->setName("");
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}

	public function testDescriptionOnCreation()
	{
		$this->assertEquals($this->object->getDescription(), NULL);
	}
	
	public function testDescriptionGetSet()
	{
		$desc = "My Description";
		$this->object->setDescription($desc);
		$this->assertEquals($this->object->getDescription(), $desc);
		
		$this->object->setDescription(NULL);
		$this->assertEquals($this->object->getDescription(), NULL);
	}

	public function testEmployerOnCreation()
	{
		$this->assertEquals($this->object->getEmployer(), NULL);
	}
	
	public function testEmployerSetGet()
	{
		$employer = "I am an Employer";
		$this->object->setEmployer($employer);
		$this->assertEquals($this->object->getEmployer(), $employer);
	}
	
	public function testEmployerExceptionOnSet()
	{
		$gotException = false;
		try {
			$this->object->setEmployer(NULL);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->setEmployer("");
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}

	public function testCreationDateOnCreation()
	{
		$this->assertEquals($this->object->getCreationDate(), NULL);
	}

	public function testCreationDateSetGet() {
		$date = new DateTime;
		$this->object->setCreationDate($date);
		$this->assertEquals($this->object->getCreationDate(), $date);
	}
	
	public function testDeadlineOnCreation()
	{
		$this->assertEquals($this->object->getDeadline(), NULL);
	}

	public function testDeadlineDateSetGet() {
		$date = new DateTime;
		$this->object->setDeadline($date);
		$this->assertEquals($this->object->getDeadline(), $date);
	}
	
	public function testStatusOnCreation()
	{
		$this->assertEquals($this->object->getStatus(), NULL);
	}

	public function testStatusGetSet()
	{
		$this->object->setStatus("Done");
		$this->assertEquals($this->object->getStatus(), "Done");
		
		$this->object->setStatus("PLAnned");
		$this->assertEquals($this->object->getStatus(), "Planned");
		
		$this->object->setStatus("in ProgresS");
		$this->assertEquals($this->object->getStatus(), "In Progress");
		
		$this->object->setStatus("cANCELED");
		$this->assertEquals($this->object->getStatus(), "Canceled");
	}
	
	public function testStatusExceptionOnSet()
	{
		$gotException = false;
		try {
			$this->object->setStatus("");
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->setStatus("RANDOM string here");
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->setStatus(NULL);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}
}
?>
