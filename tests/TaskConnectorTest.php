<?php
require_once(dirname(__FILE__) . "/../source/controls/base/TaskConnector.php");

/**
 * Test class for OverviewFilter.
 * Generated by PHPUnit on 2011-05-06 at 12:20:39.
 */
class OverviewFilterTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var OverviewFilter
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TaskConnector;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    	
    }
    
    public function testSaveTaskWithoutID() {
    	$task = new Task;
    	
    	$task->setUserRef(1);
    	$task->setAssignmentRef(1);
    	$task->setName("Name");
    	$task->setDescription("Description");
    	$task->setStarttime(new DateTime("2000-5-20 10:00:00"));
    	$task->setEndtime(new DateTime("2000-5-21 10:10:10"));
    	$task->setStatus("Done");
    	
    	$gotException = false;
		try {
    		$this->object->saveTask($task);
		} catch (Exception $e) {
			echo $e->getMessage();
			$gotException = true;
		}
		$this->assertFalse($gotException);
    	
    }
    
    public function testSaveTaskWithID() {
    	$task = new Task;
    	
    	$task->setID(1);
    	$task->setUserRef(1);
    	$task->setAssignmentRef(1);
    	$task->setName("Name");
    	$task->setDescription("Description");
    	$task->setStarttime(new DateTime("2000-5-20 10:00:00"));
    	$task->setEndtime(new DateTime("2000-5-21 10:10:10"));
    	$task->setStatus("Done");
    	
    	$gotException = false;
		try {
    		$this->object->saveTask($task);
		} catch (Exception $e) {
			echo $e->getMessage();
			$gotException = true;
		}
		$this->assertFalse($gotException);
    }
    
	/**
	 * @depends testSaveTaskWithID
	 */
	public function testGetAssignmentByID(){
		$task = $this->object->getTaskByID(1);
		
		$this->assertEquals($task->getID(), 1);
		$this->assertEquals($task->getUserRef(), 1);
		$this->assertEquals($task->getAssignmentRef(), 1);
		$this->assertEquals($task->getName(), "Name");
		$this->assertEquals($task->getDescription(), "Description");
		$this->assertEquals($task->getStarttime(), new DateTime("2000-5-20 10:00:00"));
		$this->assertEquals($task->getEndtime(), new DateTime("2000-5-21 10:10:10"));
		$this->assertEquals($task->getStatus(), "Done");
	}
	
	/**
	 * @depends testSaveTaskWithID
	 */
	public function testSeachAssignment() {
		$tasks = $this->object->searchTask(1, 
										1,
										"Name", 
										"Description", 
										new DateTime("2000-5-20 10:00:00"), 
										new DateTime("2000-5-20 10:00:00"),
										new DateTime("2000-5-21 10:10:10"), 
										new DateTime("2000-5-21 10:10:10"),
										array("Done"));

		$somethingfound = false;
		foreach ($tasks as $t) {
			$this->assertEquals($t->getUserRef(), 1);
			$this->assertEquals($t->getAssignmentRef(), 1);
			$this->assertEquals($t->getName(), "Name");
			$this->assertEquals($t->getDescription(), "Description");
			$this->assertEquals($t->getStarttime(), new DateTime("2000-5-20 10:00:00"));
			$this->assertEquals($t->getEndtime(), new DateTime("2000-5-21 10:10:10"));
			$this->assertEquals($t->getStatus(), "Done");
			$somethingfound = true;
		}
		$this->assertTrue($somethingfound);
		
	}
	
	public function testGetTaskByIDException() {
		$gotException = false;
		try {
			$this->object->getTaskByID(-100);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
		
		$gotException = false;
		try {
			$this->object->getTaskByID(PHP_INT_MAX);
		} catch (Exception $e) {
			$gotException = true;
		}
		$this->assertTrue($gotException);
	}
}